/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
/**
 * 方法的调用场景有 2 种
 * 1.render函数是用户手写的，当 children 只有一个节点的时候，Vue.js 从接口层面允许用户把 children 写成基础类型用来创建单个简单的文本节点，这种情况会调用  createTextVNode 创建一个文本节点的 VNode
 * 2.当编译 slot 、 v-for 的时候会产生嵌套数组的情况，会调用
 * @param {子节点} children 
 */
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
/**
 * render 函数当函数是编译生成的
 * 理论上编译生成的 children 都已经是 VNode 类型
 * 但这里有一个例外
 * 就是 function component 函数式组件返回的是一个数组而不是一个根节点
 * 所以会通过 Array.prototype.concat 方法把整个 children 数组打平，让它的深度只有一层
 * @param {子节点} children 
 */
export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

/**
 * 判断是否是文本节点
 * @param {节点} node 
 */
function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

/**
 * 规范的子节点
 * @param {要规范的子节点} children 
 * @param {嵌套的索引，因为单个child可能是一个数组类型} nestedIndex 
 */
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  // 遍历children
  for (i = 0; i < children.length; i++) {
    c = children[i] // 获取每个子项
    // 判断子项是否undefined 或 是boolean类型跳过循环
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1 // 获取res的作引长度
    last = res[lastIndex] // 获取res的最后一项
    //  nested
    // 如果节点c是一个数组
    if (Array.isArray(c)) {
      // 数组的长度大于0
      if (c.length > 0) {
        // 递归调用 normalizeArrayChildren
        // nestedIndex有可能是 0_0  0_0_0 0_0_1 0_0_2  0_1  0_1_0 0_1_1 0_1_2
        // 如果含有子节点，则递归，把所有子节点变成文本节点
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        // 合并相邻文本节点
        // 如果c[0]中的第一个是文本节点， 并且 res 最后一个节点是文本节点
        if (isTextNode(c[0]) && isTextNode(last)) {
          // 合并他们的文本内容，并且创建一个文本节点
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift() // 从 c 出栈第一个数据
        }
        //res 添加数据，相当于 concat 合并数组
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) { // 判断数据类型是否是string，number，symbol，boolean
      // 如果res最后数据一个是文本节点
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        // 合并es最后一个节点的文本和c，创建文本节点
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        //转换成 vnode， 创建文本节点
        res.push(createTextVNode(c))
      }
    } else {
      // 如果c是文本节点， 并且 res 最后一个节点是文本节点
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        // 合并他们的文本内容，并且创建一个文本节点
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && // 如果children._isVList 为true
          isDef(c.tag) && // c.tag 不为空
          isUndef(c.key) && // c.key 为空
          isDef(nestedIndex)) { // nestedIndex不为空
          // 赋值key的值为例如__vlist1_1__
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        // 把 VNode 添加到res中
        res.push(c)
      }
    }
  }
  return res
}
